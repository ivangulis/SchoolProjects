package executive;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.PersistenceException;

import dao.ChampionDAO;
import model.Champion;
import webSearchFeature.WebSearch;

/**
 * Session Bean implementation class LoginExecutiveBean
 * This bean is used to register new user, login (get registered user) and create new user.
 * @author Ivan Gulis
 */
@Stateless
public class ChampionsExecutiveBean {

	@PersistenceContext
    private EntityManager entityManager;
	private ChampionDAO championDAO = new ChampionDAO();
	
	/**
	 * Save all entities of champion from web into database
	 * @throws IOException
	 * @throws IllegalArgumentException
	 */
	public void saveAllChampions() throws IOException, IllegalArgumentException { 
		List<Champion> allChampions = new ArrayList<Champion>();
		WebSearch webSearch = new WebSearch();
		
		allChampions = webSearch.searchForChampions();
		//if (allChampions != null){
		//	try {
		championDAO.saveAllChampions(entityManager, allChampions);
		//		LOG.info("Info: All champions were successfully saved into database.");
		//	} catch (IllegalArgumentException  e) {
		//		LOG.log(Level.SEVERE, "Error: One or more champions are not an entity or were deleted from database"
		//				+ " - Failed to actualize champions in database.", e);
		//		return false; //to get information about success for client
		//	}
		//	return true; // success
		//} else {
		//	return false; // not success, there are no champions in this list
		//}
	}
	
	/**
	 * Load all entities of champion from database
	 * @return - list of all champions from database
	 * @throws PersistenceException
	 */
	public List<Champion> loadFromDbAllChampions() throws PersistenceException {
    	List<Champion> allChampions = championDAO.loadFromDbAllChampions(entityManager);
		for (Champion champion : allChampions) {
			entityManager.detach(champion);
		}
		//	LOG.info("Info: All champions were successfully loaded from database.");
		//} catch (PersistenceException e) {
		//	LOG.log(Level.SEVERE, "Error: Query execution exceeded the query timeout value set and the"
		//			+ " transaction was rolled back - Failed to get champion list from database.", e);
		//}
    	return allChampions; 
    }
	
	/**
	 * Load 6 most banned entities of champion from database
	 * @return - list of 6 best banned champions from database
	 * @throws PersistenceException
	 */
	public List<Champion> getTopBans() throws PersistenceException {
    	List<Champion> banList = championDAO.getTopBans(entityManager);
		for (Champion champion : banList) {
			entityManager.detach(champion);
		}
		//	LOG.info("Info: 6 certain champions were successfully loaded from database.");
		//} catch (PersistenceException e) {
		//	LOG.log(Level.SEVERE, "Error: Query execution exceeded the query timeout value set and the"
		//			+ " transaction was rolled back - Failed to get champion list from database.", e);
		//}
    	return banList; // not success, there are no champions in this list
    }

}
